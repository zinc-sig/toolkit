---
platform: linux

image_resource:
  type: registry-image
  source:
    repository: ((repository))
    tag: ((version))-((variant))

inputs:
  - name: ghost
  - name: submission
  - name: assignment-assets

outputs:
  - name: execution-output

params:
  EXECUTION_TYPE: ((execution_type))
  EXECUTION_TARGET: ((execution_target))
  PYTHON_FLAGS: ((python_flags))
  EXECUTION_FLAGS: ((execution_flags))
  PYTHONPATH: ((pythonpath))
  REQUIREMENTS_PATH: ((requirements_path))
  INPUT_PATH: ((input_path))
  OUTPUT_PATH: ((output_path))
  STDERR_PATH: ((stderr_path))
  TIMEOUT: ((timeout))
  SCORE: ((score))

run:
  path: bash
  args:
    - -c
    - |
      set -e
      
      # Make ghost executable
      chmod +x ghost/ghost-linux-amd64
      
      # Set up Python path if specified
      if [ -n "${PYTHONPATH}" ]; then
        export PYTHONPATH="${PYTHONPATH}:${PYTHONPATH}"
      else
        # Default: include submission directory for imports
        export PYTHONPATH="submission:${PYTHONPATH}"
      fi
      
      # Install requirements if specified
      if [ -n "${REQUIREMENTS_PATH}" ] && [ -f "${REQUIREMENTS_PATH}" ]; then
        echo "üì¶ Installing Python requirements from ${REQUIREMENTS_PATH}..."
        pip install --quiet -r "${REQUIREMENTS_PATH}"
      fi
      
      # Check for requirements.txt in common locations
      if [ -f "submission/requirements.txt" ]; then
        echo "üì¶ Installing submission requirements..."
        pip install --quiet -r "submission/requirements.txt"
      fi
      
      if [ -f "assignment-assets/requirements.txt" ]; then
        echo "üì¶ Installing assignment requirements..."
        pip install --quiet -r "assignment-assets/requirements.txt"
      fi
      
      # Prepare Python execution command based on type
      case "${EXECUTION_TYPE}" in
        module)
          # Execute as module: python -m module.name
          PYTHON_CMD="python3 ${PYTHON_FLAGS} -m ${EXECUTION_TARGET}"
          ;;
        package)
          # Execute as package: python -m package_name
          PYTHON_CMD="python3 ${PYTHON_FLAGS} -m ${EXECUTION_TARGET}"
          ;;
        script|*)
          # Default: execute as script
          PYTHON_CMD="python3 ${PYTHON_FLAGS} ${EXECUTION_TARGET}"
          ;;
      esac
      
      # Add execution flags if provided
      if [ -n "${EXECUTION_FLAGS}" ]; then
        PYTHON_CMD="${PYTHON_CMD} ${EXECUTION_FLAGS}"
      fi
      
      echo "üêç Executing Python: ${PYTHON_CMD}"
      echo "üìÇ PYTHONPATH: ${PYTHONPATH}"
      
      # Build ghost command with input redirection (required by ghost)
      GHOST_CMD="./ghost/ghost-linux-amd64 run --verbose"
      
      # Set input file - use specified file or /dev/null if none
      if [ -n "${INPUT_PATH}" ] && [ -f "${INPUT_PATH}" ]; then
        GHOST_CMD="${GHOST_CMD} -i \"${INPUT_PATH}\""
      else
        GHOST_CMD="${GHOST_CMD} -i /dev/null"
      fi
      
      # Add output and error paths
      GHOST_CMD="${GHOST_CMD} -o \"execution-output/${OUTPUT_PATH}:${OUTPUT_PATH}\""
      GHOST_CMD="${GHOST_CMD} -e \"execution-output/${STDERR_PATH}:${STDERR_PATH}\""
      
      # Add score and timeout
      GHOST_CMD="${GHOST_CMD} --score \"${SCORE}\""
      GHOST_CMD="${GHOST_CMD} --timeout \"${TIMEOUT}\""
      
      # Add upload provider
      GHOST_CMD="${GHOST_CMD} --upload-provider \"minio\""
      
      # Add the Python command
      GHOST_CMD="${GHOST_CMD} -- ${PYTHON_CMD}"
      
      # Execute the command
      eval ${GHOST_CMD}